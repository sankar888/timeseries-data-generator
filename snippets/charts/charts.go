// Package charts has examples of different kinds of charts.
// it uses go-echarts library to render a chart
package charts

import (
	"math/rand"

	"github.com/go-echarts/go-echarts/v2/charts"
	"github.com/go-echarts/go-echarts/v2/opts"
	"github.com/go-echarts/go-echarts/v2/types"
	"net/http"
	"fmt"
)

func generateBarItems() []opts.BarData {
	items := make([]opts.BarData, 0)
	for i := 0; i < 7; i++ {
		items = append(items, opts.BarData{Value: rand.Intn(300)})
	}
	return items
}

func BasicChart(w *http.ResponseWriter) {
	// create a new bar instance
	bar := charts.NewBar()
	// set some global options like Title/Legend/ToolTip or anything else
	bar.SetGlobalOptions(charts.WithTitleOpts(opts.Title{
		Title:    "My first bar chart generated by go-echarts",
		Subtitle: "It's extremely easy to use, right?",
	}))

	// Put data into instance
	bar.SetXAxis([]string{"Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"}).
		AddSeries("Category A", generateBarItems()).
		AddSeries("Category B", generateBarItems())
	// Where the magic happens
	//f, _ := os.Create("bar.html")
	bar.Render(*w)
}

var t [1000]int
func generateLineItems() []opts.LineData {
    items := make([]opts.LineData, len(t))
    for i, _ := range t {
        t[i] = i
        items[i] = opts.LineData{Value: rand.Intn(300)}
    }
	return items
}

func BasicLineChart(w *http.ResponseWriter) {
	// create a new line instance
    line := charts.NewLine()
    // set some global options like Title/Legend/ToolTip or anything else
    line.SetGlobalOptions(
        charts.WithInitializationOpts(opts.Initialization{Theme: types.ThemeWesteros}),
        charts.WithTitleOpts(opts.Title{
            Title:    "Line example in Westeros theme",
            Subtitle: "Line chart rendered by the http server this time",
        }))

    // Put data into instance
    ydata := generateLineItems()
    line.SetXAxis(t).
        AddSeries("Category A", ydata).
        SetSeriesOptions(charts.WithLineChartOpts(opts.LineChart{Smooth: opts.Bool(true)}))
	line.Render(*w)
}

func Serve() {
    http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request){
        BasicLineChart(&w)
    })
    fmt.Println("listening on :8080")
    if err := http.ListenAndServe(":8080", nil); err != nil {
        panic(err)
    }
}



